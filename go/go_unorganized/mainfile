package main

import (
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	_ "net/http/pprof"
	"os"
	"os/exec"
	"runtime"
	"sync/atomic"
	"syscall"
	"time"
)

const (
	maxBufferLen = 100
)

type fileReader struct {
	conn   *os.File
	closed uintptr
	peer   *fileWriter
}

func (f *fileReader) Read(p []byte) (int, error) {
	n, err := f.conn.Read(p)
	if err == io.EOF {
		if atomic.LoadUintptr(&f.closed) != 0 {
			err = f.peer.realClose()
			if err != nil {
				fmt.Println(err)
			}
			return 0, io.EOF
		}
	}
	return n, err
}

func (f *fileReader) Close() error {
	return f.Close()
}

type fileWriter struct {
	conn *os.File
	peer *fileReader
}

func (f *fileWriter) Write(b []byte) (int, error) {
	var err error
	for i := 0; ; i++ {
		if len(b) < maxBufferLen*(i+1) {
			if len(b) == maxBufferLen*i {
				break
			}
			_, err = f.conn.Write(b[maxBufferLen*i:])
			break
		}
		_, err = f.conn.Write(b[maxBufferLen*i : maxBufferLen*(i+1)])
		if err != nil {
			// Something goes wrong here which may lead to write inconsistency, stop write.
			break
		}
	}
	if err != nil {
		errNet, ok := err.(*net.OpError)
		if ok {
			errSysCall, ok := errNet.Err.(*os.SyscallError)
			if ok {
				errSys, ok := errSysCall.Err.(syscall.Errno)
				if ok {
					if errSys == syscall.ECONNREFUSED {
						if err = f.Close(); err != nil {
							return len(b), err
						}
						return len(b), nil
					}
				}
			}
		}
	}
	return len(b), err
}

func (f *fileWriter) Close() error {
	atomic.StoreUintptr(&f.peer.closed, 1)
	_, err := f.conn.Write([]byte{})
	if err != nil {
		fmt.Println(err)
	}
	return f.Close()
}

func (f *fileWriter) realClose() error {
	_, err := f.Write([]byte{})
	if err != nil {
		fmt.Println(err)
	}
	return f.Close()
}
func filePipe(name string) (*fileReader, *fileWriter, error) {
	// First generate the file name.
	r, err := os.OpenFile(name, os.O_CREATE|os.O_RDONLY, os.FileMode(0644))
	if err != nil {
		return nil, nil, err
	}
	w, err := os.OpenFile(name, os.O_CREATE|os.O_WRONLY, os.FileMode(0644))
	if err != nil {
		return nil, nil, err
	}
	reader := &fileReader{
		conn: r,
	}
	writer := &fileWriter{
		conn: w,
		peer: reader,
	}
	reader.peer = writer
	return reader, writer, nil
}
func main() {
	runtime.SetMutexProfileFraction(1)
	runtime.SetBlockProfileRate(1)
	go func() {
		log.Println(http.ListenAndServe(":8088", nil))
	}()

	r1, w1, err := os.Pipe()
	if err != nil {
		fmt.Println(err)
	}
	r2, w2, err := os.Pipe()
	if err != nil {
		fmt.Println(err)
	}
	reader1, writer1, err := filePipe("out")
	if err != nil {
		fmt.Println(err)
	}
	_, writer2, err := filePipe("err")
	if err != nil {
		fmt.Println(err)
	}
	cmd := exec.Command("./hw")
	cmd.Stdout = w1
	cmd.Stderr = w2
	copyClose := func(r *os.File, w io.WriteCloser) {
		fmt.Println("copy begins")
		_, err := io.Copy(w, r)
		fmt.Println("copy ends")
		if err != nil {
			fmt.Println("copy error", err)
		}
		if err := w.Close(); err != nil {
			fmt.Println(err)
		}
		if err := r.Close(); err != nil {
			fmt.Println(err)
		}
	}
	go copyClose(r1, writer1)
	go copyClose(r2, writer2)
	buf := make([]byte, maxBufferLen)
	go cmd.Run()
	time.Sleep(10 * time.Second)
	for {
		n, err := reader1.Read(buf)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Println(string(buf[:n]))
		if n == 0 {
			return
		}
		// if i == 1 {
		// 	re, ok := cmd.Stdout.(io.WriteCloser)
		// 	if !ok {
		// 		fmt.Println("error")
		// 	}
		// 	re.Close()
		// 	cmd.Stdout = nil
		// 	// r1.Close()
		// }
	}
	return
}
